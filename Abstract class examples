In [3]: from abc import ABC, abstractmethod
   ...:
   ...: class Shape(ABC):
   ...:     @abstractmethod
   ...:     def area(self):
   ...:         pass
   ...:
   ...:     @abstractmethod
   ...:     def perimeter(self):
   ...:         pass
   ...:
   ...: class Circle(Shape):
   ...:     def __init__(self, radius):
   ...:         self.radius = radius
   ...:
   ...:     def area(self):
   ...:         return 3.14159 * self.radius ** 2
   ...:
   ...:     def perimeter(self):
   ...:         return 2 * 3.14159 * self.radius
   ...:
   ...: class Rectangle(Shape):
   ...:     def __init__(self, width, height):
   ...:         self.width = width
   ...:         self.height = height
   ...:
   ...:     def area(self):
   ...:         return self.width * self.height
   ...:
   ...:     def perimeter(self):
   ...:         return 2 * (self.width + self.height)
   ...:
   ...: circle = Circle(5)
   ...: rectangle = Rectangle(4, 6)
   ...:
   ...: print("Circle Area:", circle.area())
   ...: print("Circle Perimeter:", circle.perimeter())
   ...: print("Rectangle Area:", rectangle.area())
   ...: print("Rectangle Perimeter:", rectangle.perimeter())
   ...:
Circle Area: 78.53975
Circle Perimeter: 31.4159
Rectangle Area: 24
Rectangle Perimeter: 20

from abc import ABC, abstractmethod
 
 
class Polygon(ABC):
 
    @abstractmethod
    def noofsides(self):
        pass
 
 
class Triangle(Polygon):
 
    # overriding abstract method
    def noofsides(self):
        print("I have 3 sides")
 
 
class Pentagon(Polygon):
 
    # overriding abstract method
    def noofsides(self):
        print("I have 5 sides")
 
 
class Hexagon(Polygon):
 
    # overriding abstract method
    def noofsides(self):
        print("I have 6 sides")
 
 
class Quadrilateral(Polygon):
 
    # overriding abstract method
    def noofsides(self):
        print("I have 4 sides")
 
 
# Driver code
R = Triangle()
R.noofsides()
 
K = Quadrilateral()
K.noofsides()
 
R = Pentagon()
R.noofsides()
 
K = Hexagon()
K.noofsides()
I have 3 sides
I have 4 sides
I have 5 sides
I have 6 sides

In [1]: class Person:
   ...:   def __init__(self, name, age):
   ...:     self.name = name
   ...:     self.age = age
   ...:
   ...: p1 = Person("John", 36)
   ...:
   ...: print(p1.name)
   ...: print(p1.age)
John
36

